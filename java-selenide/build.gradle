// Apply the java plugin to add support for Java
apply plugin: 'java'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0-RC2"
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

ext {
    seleniumVersion = '3.4.0'
    selenideVersion = '4.5.1'
    typesafeVersion = '1.3.0'
    log4jVersion = '2.6.1'
    disruptorVersion = '3.3.6'
    junitJupiterVersion = '5.0.0-RC2'
}

junitPlatform {
    filters {
        engines {
            include 'junit-jupiter'
        }
    }
    enableStandardTestTask true
}

// In this section you declare the dependencies for your production and test code
dependencies {

    compile(
            "com.typesafe:config:$typesafeVersion",
            "org.seleniumhq.selenium:selenium-support:$seleniumVersion",
            "org.seleniumhq.selenium:selenium-api:$seleniumVersion",
            "org.apache.logging.log4j:log4j-api:$log4jVersion",
            "org.apache.logging.log4j:log4j-core:$log4jVersion",
            "com.lmax:disruptor:$disruptorVersion"   //For using Async loggers
    )

    testCompile(
            // JUnit Jupiter API and TestEngine implementation
            "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}",
            "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}",
            "org.seleniumhq.selenium:selenium-java:$seleniumVersion",
            "com.codeborne:selenide:$selenideVersion"
    )
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

